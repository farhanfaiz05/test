name: Terraform Apply Workflow

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 3: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # Step 4: Create S3 bucket
      - name: Check and create S3 bucket if not exists
        run: |
          BUCKET_NAME="farhan-g2-test-bucket2"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket $BUCKET_NAME already exists. Skipping creation.."
          else
            echo "Bucket $BUCKET_NAME does not exist. Creating...."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region us-east-1
          fi
      
      # Step 5: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 6: Terraform workspace select/create
      - name: Terraform workspace
        run: terraform workspace select --or-create=true g2-interview

      # Step 7: Terraform Plan
      - name: Terraform Plan
        run: terraform plan

      # Step 8: Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Step 9: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Step 10: Connect kubectl to cluster
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name g2-interview-cluster --region us-east-1

      # Step 11: Get load balancer address
      - name: Get load balancer address
        run: |
          DNS=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Loadbalancer DNS : $DNS"
